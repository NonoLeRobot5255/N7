(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | mk_ref : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments mk_ref {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | mk_ref x => x
  end.

Parameter fibonacci: Z -> Z.

Axiom fibonacci_zero : ((fibonacci 0%Z) = 0%Z).

Axiom fibonacci_un : ((fibonacci 1%Z) = 1%Z).

Axiom fibonacci_suite :
  forall (n:Z),
  ((fibonacci (n + 2%Z)%Z) = ((fibonacci n) + (fibonacci (n + 1%Z)%Z))%Z).

Parameter n: Z.

Axiom H : (0%Z <= n)%Z.

(* Why3 goal *)
Theorem VC_fibonacci_ascendant :
  (0%Z = (fibonacci 0%Z)) /\
  ((1%Z = (fibonacci (0%Z + 1%Z)%Z)) /\ (n <= 0%Z)%Z).
Proof.
split.
rewrite fibonacci_zero.
reflexivity.

split.
simpl.
rewrite fibonacci_un.
reflexivity.


Qed.

